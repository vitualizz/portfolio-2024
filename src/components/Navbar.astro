---
import { getLangFromUrl, useTranslation } from '../i18n/utils'
import ThemeToggleBtn from '../components/ThemeToggleBtn.astro'
import Bars3 from 'astro-heroicons/outline/Bars3.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslation(lang)

type NavItem = {
  name: string
  path: string
}

const tNav = t('nav')
const navItems: NavItem[] = [
  {
    name: 'presentation',
    path: `/${lang}/#presentation`
  },
  {
    name: 'about_me',
    path: `/${lang}/#about_me`
  },
  {
    name: 'projects',
    path: `/${lang}/#projects`
  },
  {
    name: 'contact_me',
    path: `/${lang}/#contact_me`
  },
  {
    name: 'blog',
    path: `/${lang}/blog`
  }
]
---

<div class="drawer">
  <input id="drawerNavbar" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content flex h-screen flex-col landscape:h-full">
    <div class="navbar fixed z-10 w-full shadow-md">
      <div class="navbar-start md:invisible">
        <label
          id="drawerToggleOpen"
          aria-label="open sidebar"
          class="btn btn-square btn-ghost"
        >
          <Bars3 class="w-6" />
        </label>
      </div>

      <nav class="navbar-center grid grid-cols-5 md:w-[500px]">
        {
          navItems.map((item) => (
            <div class="items-cente group mx-2 flex flex-col items-center">
              <a
                href={item.path}
                class="hidden transition duration-300 group-hover:font-bold md:block"
                data-nav-item={item.name}
              >
                {tNav[item.name as keyof typeof tNav]}
              </a>
              <span
                data-nav-item={item.name}
                class="align-center block h-0.5 w-0 bg-custom-yellow transition-all duration-500 group-hover:w-[80%]"
              />
            </div>
          ))
        }
      </nav>

      <div class="navbar-end text-gray-700 dark:text-gray-200">
        <a
          href={`/cv/${lang}.pdf`}
          download={`LeePalacios_${lang}.pdf`}
          class="duration-y btn transform border-none bg-gray-500/20 transition hover:scale-110 hover:bg-gray-500/40"
        >
          {lang === 'en' ? 'Resume' : 'Curriculum'}
        </a>
        <div class="dropdown ml-4 mr-1">
          <div
            tabindex="0"
            role="button"
            class="btn border-none bg-gray-500/20 hover:bg-gray-500/40"
          >
            {lang === 'en' ? 'Language' : 'Idioma'}
          </div>
          <ul
            tabindex="0"
            class="menu dropdown-content z-[1] w-52 rounded-box bg-base-100 p-2 shadow"
          >
            <li><a href="/es">Espa√±ol</a></li>
            <li><a href="/en">English</a></li>
          </ul>
        </div>
        <ThemeToggleBtn />
      </div>
    </div>

    <div class="mt-auto h-full md:h-screen">
      <slot />
    </div>
  </div>

  <div class="drawer-side z-20">
    <label
      id="drawerToggleClose"
      aria-label="close sidebar"
      class="drawer-overlay"></label>
    <ul class="menu min-h-full w-80 bg-base-100 p-3">
      <li>
        {
          navItems.map((item) => (
            <a href={item.path} class="navbarMenuItem">
              {tNav[item.name as keyof typeof tNav]}
            </a>
          ))
        }
      </li>
    </ul>
  </div>
</div>

<script>
  /* Navbar Mobile */
  const drawerNavbar = document.getElementById(
    'drawerNavbar'
  ) as HTMLInputElement
  const drawerToggleOpen = document.getElementById(
    'drawerToggleOpen'
  ) as HTMLLabelElement
  const drawerToggleClose = document.getElementById(
    'drawerToggleClose'
  ) as HTMLLabelElement
  const navbarMenuItems = document.querySelectorAll('.navbarMenuItem')
  const navbar = document.querySelector('.navbar') as HTMLElement
  const presentationSection = document.getElementById(
    'presentation'
  ) as HTMLElement

  navbarMenuItems.forEach((x) => {
    x.addEventListener('click', () => {
      drawerNavbar.checked = false
    })
  })

  drawerToggleOpen.addEventListener('click', () => {
    drawerNavbar.checked = true
  })

  drawerToggleClose.addEventListener('click', () => {
    drawerNavbar.checked = false
  })

  /* Intersection Observer */
  const sectionTargets = document.querySelectorAll('[data-section]')
  const aNavTargets = document.querySelectorAll('a[data-nav-item]')
  const spanNavTargets = document.querySelectorAll('span[data-nav-item]')

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          aNavTargets.forEach((x) => x.classList.remove('font-bold'))
          spanNavTargets.forEach((x) => x.classList.remove('w-[80%]'))
          const aItemTarget = document.querySelector(
            `a[data-nav-item=${(entry.target as HTMLElement).dataset.section}]`
          ) as HTMLAnchorElement
          const spanItemTarget = document.querySelector(
            `span[data-nav-item=${(entry.target as HTMLElement).dataset.section}]`
          ) as HTMLSpanElement
          spanItemTarget.classList.add('w-[80%]')
          aItemTarget.classList.add('font-bold')
        }
      })
    },
    {
      rootMargin: '-50% 0% -50% 0%',
      threshold: 0
    }
  )

  sectionTargets.forEach((x) => observer.observe(x))

  document.addEventListener('scroll', () => {
    if (window.scrollY < presentationSection.clientHeight) {
      navbar.classList.add('bg-transparent')
      navbar.classList.remove('bg-base-100')
    } else {
      navbar.classList.remove('bg-transparent')
      navbar.classList.add('bg-base-100')
    }
  })
</script>
