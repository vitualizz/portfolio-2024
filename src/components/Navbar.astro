---
import { getLangFromUrl, useTranslations } from '../i18n/utils'
import ThemeToggleBtn from '../components/ThemeToggleBtn.astro'
import Bars3 from 'astro-heroicons/outline/Bars3.astro'

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

type NavItem = {
  name: string
  path: string
}

const tNav = t('nav')
const navItems: NavItem[] = [
  {
    name: 'presentation',
    path: '#presentation'
  },
  {
    name: 'about_me',
    path: '#about_me'
  },
  {
    name: 'projects',
    path: '#projects'
  },
  {
    name: 'contact_me',
    path: '#contact_me'
  }
]
---

<div class="drawer">
  <input id="drawerNavbar" type="checkbox" class="drawer-toggle" />
  <div class="drawer-content flex h-screen flex-col landscape:h-full">
    <div class="navbar fixed z-10 w-full bg-base-100 shadow-md">
      <div class="navbar-start md:invisible">
        <label
          id="drawerToggleOpen"
          htmlFor="drawerNavbar"
          aria-label="open sidebar"
          class="btn btn-square btn-ghost"
        >
          <Bars3 class="w-6" />
        </label>
      </div>

      <nav class="navbar-center grid grid-cols-4 bg-base-100 md:w-[480px]">
        {
          navItems.map((item) => (
            <div class="items-cente group mx-2 flex flex-col items-center">
              <a
                href={item.path}
                key={item.path}
                class="hidden transition duration-300 group-hover:font-bold md:block"
                data-nav-item={item.name}
              >
                {tNav[item.name]}
              </a>
              <span
                data-nav-item={item.name}
                class="align-center block h-0.5 w-0 bg-custom-yellow transition-all duration-500 group-hover:w-[80%]"
              />
            </div>
          ))
        }
      </nav>

      <div class="navbar-end text-gray-700 dark:text-gray-200">
        <a
          href={`/cv/${lang}.pdf`}
          download={`LeePalacios_${lang}.pdf`}
          class="duration-y `btn btn transform cursor-pointer bg-gray-500/20 transition hover:scale-110 hover:bg-gray-500/40"
        >
          {lang === 'en' ? 'Resume' : 'Curriculum'}
        </a>
        <ThemeToggleBtn />
      </div>
    </div>

    <div class="h-full md:h-screen landscape:mt-10 landscape:md:mt-0">
      <slot />
    </div>
  </div>

  <div class="drawer-side z-20">
    <label
      id="drawerToggleClose"
      htmlFor="drawerNavbar"
      aria-label="close sidebar"
      class="drawer-overlay"
      for="drawerNavbar"></label>
    <ul class="menu min-h-full w-80 bg-base-100 p-3">
      <li>
        {
          navItems.map((item) => (
            <a href={item.path} key={item.path} class="navbarMenuItem">
              {tNav[item.name]}
            </a>
          ))
        }
      </li>
    </ul>
  </div>
</div>

<script>
  /* Navbar Mobile */
  const drawerNavbar = document.getElementById('drawerNavbar')
  const drawerToggleOpen = document.getElementById('drawerToggleOpen')
  const drawerToggleClose = document.getElementById('drawerToggleClose')
  const navbarMenuItems = document.querySelectorAll('.navbarMenuItem')

  navbarMenuItems.forEach((x) => {
    x.addEventListener('click', () => {
      drawerNavbar.checked = false
    })
  })

  drawerToggleOpen.addEventListener('click', () => {
    drawerNavbar.checked = true
  })

  drawerToggleClose.addEventListener('click', () => {
    drawerNavbar.checked = false
  })

  /* Intersection Observer */
  const sectionTargets = document.querySelectorAll('[data-section]')
  const aNavTargets = document.querySelectorAll('a[data-nav-item]')
  const spanNavTargets = document.querySelectorAll('span[data-nav-item]')

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          aNavTargets.forEach((x) => x.classList.remove('font-bold'))
          spanNavTargets.forEach((x) => x.classList.remove('w-[80%]'))
          const aItemTarget = document.querySelector(
            `a[data-nav-item=${entry.target.dataset.section}]`
          )
          const spanItemTarget = document.querySelector(
            `span[data-nav-item=${entry.target.dataset.section}]`
          )
          spanItemTarget.classList.add('w-[80%]')
          aItemTarget.classList.add('font-bold')
        }
      })
    },
    {
      rootMargin: '-50% 0% -50% 0%',
      threshold: 0
    }
  )

  sectionTargets.forEach((x) => observer.observe(x))
</script>
