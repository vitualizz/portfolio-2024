---
import Envelope from 'astro-heroicons/outline/Envelope.astro'
import DocumentText from 'astro-heroicons/outline/DocumentText.astro'
import GithubIcon from '../components/icons/Github.astro'
import Linkedin from '../components/icons/Linkedin.astro'
import { getLangFromUrl, useTranslation } from '../i18n/utils.ts'

const lang = getLangFromUrl(Astro.url)
const t = useTranslation(lang)

const tContactMe = t('contact_me')
---

<section
  data-section="contact_me"
  id="contact_me"
  class="hero min-h-[80vh] bg-gradient-to-r"
>
  <div
    class="hero-content flex-col lg:flex-row lg:justify-around xl:justify-between"
  >
    <div class="w-10/12 text-center lg:w-4/12 lg:text-left">
      <h3
        class="text-4xl font-bold md:text-5xl"
        set:html={tContactMe.tell_me}
      />
      <a href="mailto:vitualizz@gmail.com" class="">
        <div
          class="mt-10 flex items-center gap-4 rounded-lg bg-gray-400/20 px-7 py-2 transition hover:scale-105"
        >
          <Envelope class="h-8 w-8" />
          <p class="font-medium">vitualizz@gmail.com</p>
        </div>
      </a>
      <a href="https://github.com/vitualizz" target="_blank">
        <div
          class="mt-5 flex items-center gap-4 rounded-lg bg-gray-400/20 px-7 py-2 transition hover:scale-105"
        >
          <GithubIcon class="h-8 w-8" />
          <p class="font-medium">vitualizz</p>
        </div>
      </a>
      <a href="https://www.linkedin.com/in/vitualizz/" target="_blank">
        <div
          class="mt-5 flex items-center gap-4 rounded-lg bg-gray-400/20 px-7 py-2 transition hover:scale-105"
        >
          <Linkedin class="h-8 w-8" />
          <p class="font-medium">Lee Palacios</p>
        </div>
      </a>
      <a
        href={`/cv/${lang}.pdf`}
        download={`LeePalacios_${lang}.pdf`}
        target="_blank"
      >
        <div
          class="mt-5 flex items-center gap-4 rounded-lg bg-gray-400/20 px-7 py-2 transition hover:scale-105"
        >
          <DocumentText class="h-8 w-8" />
          <p class="font-medium">{lang === 'en' ? 'Resume' : 'Curriculum'}</p>
        </div>
      </a>
    </div>
    <div class="card w-full max-w-sm shrink-0 bg-base-100 shadow-2xl">
      <form
        id="contactForm"
        action="/api/contact"
        method="POST"
        class="card-body"
      >
        <h3
          class="card-title text-xl font-bold md:text-2xl"
          set:html={tContactMe.send_message_me}
        />
        <div class="form-control">
          <label class="label">
            <span class="label-text">Email</span>
          </label>
          <input
            type="email"
            placeholder="Ingresa tu email para contactar"
            class="input input-bordered"
            name="email"
            required
          />
        </div>
        <div class="form-control">
          <label class="label">
            <span class="label-text">Mensaje</span>
          </label>
          <textarea
            placeholder="Cuéntame sobre tu proyecto/trabajo"
            class="textarea input-bordered min-h-28"
            name="description"
            required></textarea>
        </div>
        <div class="form-control mt-6">
          <button type="submit" class="btn">Enviar mensaje</button>
        </div>
      </form>
    </div>
  </div>
</section>
<script>
  document
    .getElementById('contactForm')
    ?.addEventListener('submit', async function (e) {
      e.preventDefault()

      const form = this
      const button = form.querySelector('button[type="submit"]')
      const originalText = button.innerHTML

      // Animación de envío
      button.innerHTML = `
      <svg class="animate-spin w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      Enviando...
    `

      // Recoger datos
      const formData = new FormData(form)

      try {
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData
        })

        if (response.ok) {
          button.innerHTML = `
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
          </svg>
          ¡Mensaje Enviado!
        `
          button.classList.remove('bg-primary-600', 'hover:bg-primary-700')
          button.classList.add('bg-success-600', 'hover:bg-success-700')
          form.reset()
        } else {
          throw new Error('No se pudo enviar')
        }
      } catch (err) {
        button.innerHTML = `
        <svg class="w-5 h-5 mr-2 text-red-600" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-5v2H9v-2h2zm0-8v6H9V5h2z" clip-rule="evenodd"></path>
        </svg>
        Error al enviar
      `
        button.classList.remove('bg-primary-600', 'hover:bg-primary-700')
        button.classList.add('bg-red-600', 'hover:bg-red-700')
      }

      // Restaurar luego de 3 segundos
      setTimeout(() => {
        button.innerHTML = originalText
        button.classList.remove(
          'bg-success-600',
          'hover:bg-success-700',
          'bg-red-600',
          'hover:bg-red-700'
        )
        button.classList.add('bg-primary-600', 'hover:bg-primary-700')
      }, 3000)
    })
</script>
